- name: Ping test for windows clients
  hosts: all
  gather_facts: False
  #become: yes

  vars_files:
    - ./vars/ext_vars.yml  
  
  tasks:
    - name: Ping Hosts                                                           #For Debugging Purpose
      win_ping:
    
 #   - name: Print File Names                                                    #For Debugging Purpose
 #     ansible.builtin.debug:
  #      msg: "File Path1: {{ project_folder }}"
  #      msg: "File Path2: {{ os_patching_folder }}"

    - name: Create os_patching directory
      win_file:
        path: "{{ os_patching_folder }}"
        state: directory
        recurse: yes

    - name: Create Logs directory
      win_file:
        path: "{{ os_patching_logs_folder }}"
        state: directory
        recurse: yes

    - name: Create Utilities directory
      win_file:
        path: "{{ os_patching_utilities_folder }}"
        state: directory
        recurse: yes

    #- name: Print File Paths using the loop attribute                          #For Debugging Purpose
    #  ansible.builtin.debug:
    #    msg: "File Path: {{ item }}"
    #  loop: "{{ file_paths }}"

    - name: Copy the clear-diskspace.ps1 script
      ansible.windows.win_copy:
        src: "{{ project_folder }}\\clear-diskspace.ps1"      # Source directory containing the script template
        dest: "{{ os_patching_utilities_folder }}\\clear-diskspace.ps1"
        remote_src: yes


    - name: Copy the clear-softwaredistribution.ps1 script
      ansible.windows.win_copy:
        src: "{{ project_folder }}\\clear-softwaredistribution.ps1"      # Source directory containing the script template
        dest: "{{ os_patching_folder }}\\clear-softwaredistribution.ps1"
        remote_src: yes
      #  mode: '0664' 

    - name: Copy the check-patchinstall.ps1.erb script
      ansible.windows.win_copy:
        src: "{{ project_folder }}\\check-patchinstall.ps1.erb"      # Source directory containing the script template
        dest: "{{ os_patching_folder }}\\check-patchinstall.ps1.erb"
        remote_src: yes

    - name: Copy the manual_updates_installation.ps1.erb script
      ansible.windows.win_copy:
        src: "{{ project_folder }}\\manual_updates_installation.ps1.erb"      # Source directory containing the script template
        dest: "{{ os_patching_folder }}\\manual_updates_installation.ps1.erb"
        remote_src: yes

    - name: Copy the patch_report.ps1.erb script
      ansible.windows.win_copy:
        src: "{{ project_folder }}\\patch_report.ps1.erb"      # Source directory containing the script template
        dest: "{{ os_patching_folder }}\\patch_report.ps1.erb"
        remote_src: yes

    - name: Copy the delete_patch_report_task.ps1.erb script
      ansible.windows.win_copy:
        src: "{{ project_folder }}\\delete_patch_report_task.ps1.erb"      # Source directory containing the script template
        dest: "{{ os_patching_folder }}\\delete_patch_report_task.ps1.erb"
        remote_src: yes
      

    - name: Create certificates directory and Chek it exists or not
      ansible.windows.win_file:
        path: "{{ certificates_folder }}"
        state: directory
      when: certificates_folder is defined and certificates_folder is not none

    - name: Copy Certificates from main source to target folder
      win_copy:
        src: "{{ project_folder }}\\{{ item }}"
        dest: "{{ certificates_folder }}\\{{ item }}"
        remote_src: yes
      when: certificates_folder is defined and certificates_folder is not none
      loop: "{{ file_paths }}"



    - name: Install certificates in Personal Store
      win_shell: |
        $certPath = "{{certificates_folder }}/{{ item }}"
        $certContent = Get-Content $certPath
        $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
        $cert.Import([System.Text.Encoding]::UTF8.GetBytes($certContent))
        $store = New-Object System.Security.Cryptography.X509Certificates.X509Store("MY", "LocalMachine")
        $store.Open("ReadWrite")
        $store.Add($cert)
        $store.Close()
      when: certificates_folder is defined
      with_items: "{{ certs_to_install }}"

    - name: Install certificates in Root and Trusted Publisher Stores
      win_shell: |
        $certPath = "{{ WPP_certs }}"
        $storeName = "{{ item }}"
        Import-Certificate -FilePath $certPath -CertStoreLocation $storeName
      when: certificates_folder is defined and certificates_folder is not none
      loop:
        - CERT:\LocalMachine\TRUSTEDPUBLISHER
        - CERT:\LocalMachine\ROOT
        #- CERT:\CurrentUser\MY



    - name: Download file from GitHub Repository
      win_get_url:
        url: "https://raw.githubusercontent.com/ajinkyagadge/os_patching/main/infra_prft_demo_cert_com.crt"                           #infra_prft_demo_cert_com.crt
      # url: "https://username:password@raw.githubusercontent.com/ajinkyagadge/os_patching/main/infra_prft_demo_cert_com.crt"         #If repo is private
        dest: "{{ certificates_folder }}\\infra_prft_demo_cert_com.crt"



    - name: Edit the registry HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\WindowsUpdate
      win_regedit:
        path: "{{ regpath1 }}"
        name: "{{ item.name }}"
        type: "{{ item.type }}"
        data: "{{ item.data }}"
      loop: "{{ registry_entries1 }}"

    - name: Edit the registry HKLM\Software\Policies\Microsoft\Windows\WindowsUpdate\AU
      win_regedit:
        path: "{{ regpath2 }}"
        name: "{{ item.name }}"
        type: "{{ item.type }}"
        data: "{{ item.data }}"
      loop: "{{ registry_entries2 }}"

  

    - name: Configure and Start Windows Update Service
      win_service:
        name: wuauserv
        start_mode: auto
        state: started
      async: 60
      poll: 0
