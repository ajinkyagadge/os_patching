- name: Ping test for windows clients
  hosts: all
  gather_facts: False
  #become: yes

  vars_files:
    - ./vars/ext_vars.yml  
  
  tasks:
    - name: ping
      win_ping:
    
    - name: Print File name
      ansible.builtin.debug:
        msg: "File Path1: {{ project_folder }}"
        msg: "File Path2: {{ os_patching_folder }}"

    - name: Create os_patching directory
      win_file:
        path: "{{ os_patching_folder }}"
        state: directory
        recurse: yes

    - name: Create certificates directory and chek it exists or not
      ansible.windows.win_file:
        path: "{{ certificates_folder }}"
        state: directory
      when: certificates_folder is defined and certificates_folder is not none

    - name: Print File Paths
      ansible.builtin.debug:
        msg: "File Path: {{ item }}"
      loop: "{{ file_paths }}"

    - name: Copy the clear-softwaredistribution.ps1 script
      ansible.windows.win_copy:
        src: "{{ project_folder }}\\clear-softwaredistribution.ps1.j2.txt"                             # Source directory containing the script template
        #src: "{{ lookup('file', '/path/to/demofile') }}"
        dest: "{{ os_patching_folder }}\\clear-softwaredistribution.ps1"
        remote_src: yes
        mode: '0664' 

    - name: Copy Certificates
      win_copy:
        src: "{{ project_folder }}\\{{ item }}"
        dest: "{{ certificates_folder }}\\{{ item }}"
        remote_src: yes
      when: certificates_folder is defined and certificates_folder is not none
      loop: "{{ file_paths }}"

    #- name: Install certificates
    #  win_pfx_certificate:
     #   pfx_path: "{{ certificates_folder }}/{{ item }}"
    #    store_location: LocalMachine
    #    store_name: MY
     #   state: present
    #  when: certificates_folder is defined
    #  with_items: "{{ certs_to_install }}"

    #- name: Installing Certificates
    #  win_certificate:
    #   src: "{{ certificates_folder }}/{{ item }}"
    #   store_name: MY
   #    state: present
    #   #pfx_password: "your_pfx_password"
    #  when: certificates_folder is defined
   #   with_items: "{{ certs_to_install }}"

    - name: Install certificate
      win_shell: |
        $certPath = "{{certificates_folder }}/{{ item }}"
        $certContent = Get-Content $certPath
        $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
        $cert.Import([System.Text.Encoding]::UTF8.GetBytes($certContent))
        $store = New-Object System.Security.Cryptography.X509Certificates.X509Store("MY", "LocalMachine")
        $store.Open("ReadWrite")
        $store.Add($cert)
        $store.Close()
      # Import-PfxCertificate -FilePath $certPath -CertStoreLocation Cert:\LocalMachine\MY
      # $certPassword = ConvertTo-SecureString -String "your_pfx_password" -Force -AsPlainText
      # Import-PfxCertificate -FilePath $certPath -CertStoreLocation Cert:\LocalMachine\MY -Password $certPassword
      when: certificates_folder is defined
      with_items: "{{ certs_to_install }}"


    - name: Download file from GitHub
      win_get_url:
        url: "https://raw.githubusercontent.com/ajinkyagadge/os_patching/main/infra_prft_demo_cert_com.crt"                           #infra_prft_demo_cert_com.crt
      # url: "https://username:password@raw.githubusercontent.com/ajinkyagadge/os_patching/main/infra_prft_demo_cert_com.crt"         #If repo is private
        dest: "{{ certificates_folder }}\\infra_prft_demo_cert_com.crt"
